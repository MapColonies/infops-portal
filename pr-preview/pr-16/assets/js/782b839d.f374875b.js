"use strict";(self.webpackChunkinfops_portal=self.webpackChunkinfops_portal||[]).push([[8122],{2135:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>S,contentTitle:()=>T,default:()=>E,frontMatter:()=>N,metadata:()=>M,toc:()=>V});var i=t(4848),s=t(8453),a=t(6540),r=t(4164),o=t(3104),l=t(6347),c=t(205),h=t(7485),d=t(1682),u=t(679);function m(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return m(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:s}}=e;return{value:n,label:t,attributes:i,default:s}}))}(t);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function g(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const i=(0,l.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,h.aZ)(s),(0,a.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(i.location.search);n.set(s,e),i.replace({...i.location,search:n.toString()})}),[s,i])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,s=p(e),[r,o]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!g({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:s}))),[l,h]=f({queryString:t,groupId:i}),[d,m]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,s]=(0,u.Dv)(t);return[i,(0,a.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:i}),x=(()=>{const e=l??d;return g({value:e,tabValues:s})?e:null})();(0,c.A)((()=>{x&&o(x)}),[x]);return{selectedValue:r,selectValue:(0,a.useCallback)((e=>{if(!g({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),m(e)}),[h,m,s]),tabValues:s}}var j=t(2303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:n,block:t,selectedValue:s,selectValue:a,tabValues:l}=e;const c=[],{blockElementScrollPositionUntilNextRender:h}=(0,o.a_)(),d=e=>{const n=e.currentTarget,t=c.indexOf(n),i=l[t].value;i!==s&&(h(n),a(i))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,i.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,i.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>c.push(e),onKeyDown:u,onClick:d,...a,className:(0,r.A)("tabs__item",y.tabItem,a?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function v(e){let{lazy:n,children:t,selectedValue:s}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===s));return e?(0,a.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,i.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function w(e){const n=x(e);return(0,i.jsxs)("div",{className:(0,r.A)("tabs-container",y.tabList),children:[(0,i.jsx)(b,{...n,...e}),(0,i.jsx)(v,{...n,...e})]})}function k(e){const n=(0,j.A)();return(0,i.jsx)(w,{...e,children:m(e.children)},String(n))}const C={tabItem:"tabItem_Ymn6"};function I(e){let{children:n,hidden:t,className:s}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.A)(C.tabItem,s),hidden:t,children:n})}const N={title:"Zero to Hero",sidebar_position:1,toc_min_heading_level:2,toc_max_heading_level:2},T="From Zero to Hero",M={id:"guides/config-management/zero-to-hero",title:"Zero to Hero",description:"Step by step guide on how to integrate the MapColonies\u2122 Config Management system into your service.",source:"@site/docs/guides/config-management/zero-to-hero.mdx",sourceDirName:"guides/config-management",slug:"/guides/config-management/zero-to-hero",permalink:"/docs/guides/config-management/zero-to-hero",draft:!1,unlisted:!1,editUrl:"https://github.com/MapColonies/infops-portal/tree/master/docs/guides/config-management/zero-to-hero.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Zero to Hero",sidebar_position:1,toc_min_heading_level:2,toc_max_heading_level:2},sidebar:"guidesSidebar",previous:{title:"Config Management",permalink:"/docs/category/config-management"}},S={},V=[{value:"Assumptions",id:"assumptions",level:3},{value:"What is Config Management?",id:"what-is-config-management",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Before we start",id:"before-we-start",level:2},{value:"Initialize the work environment",id:"initialize-the-work-environment",level:2},{value:"Creating the schema",id:"creating-the-schema",level:2},{value:"Run validations",id:"run-validations",level:2},{value:"Validating the types",id:"validating-the-types",level:2},{value:"Checking integration with your service",id:"checking-integration-with-your-service",level:2},{value:"Next steps",id:"next-steps",level:2}];function _(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"from-zero-to-hero",children:"From Zero to Hero"})}),"\n",(0,i.jsx)(n.p,{children:"Step by step guide on how to integrate the MapColonies\u2122 Config Management system into your service."}),"\n",(0,i.jsx)(n.h3,{id:"assumptions",children:"Assumptions"}),"\n",(0,i.jsxs)(n.p,{children:["This guide assumes that you have an already existing service based on the ",(0,i.jsx)(n.a,{href:"https://github.com/MapColonies/ts-server-boilerplate",children:"MapColonies boilerplate repo"}),", and basic knowledge of JSON Schema. If needed you can read and learn about JSON Schema in the following link: ",(0,i.jsx)(n.a,{href:"https://json-schema.org/understanding-json-schema",children:"https://json-schema.org/understanding-json-schema"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["It is also recommended to read the ",(0,i.jsx)(n.a,{href:"https://github.com/MapColonies/schemas/blob/master/README.md",children:"schemas package readme"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"what-is-config-management",children:"What is Config Management?"}),"\n",(0,i.jsx)(n.p,{children:"Config Management is the complete solution to manage all the configuration needs of MapColonies.\nIt's intended to support the system in all stages from early development to production."}),"\n",(0,i.jsx)(n.p,{children:"Config management has the following parts:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/MapColonies/schemas",children:"schemas"})," - Contains the JSON Schemas that define all the configs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/MapColonies/config-server",children:"config-server"})," - Server for managing all the configurations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/MapColonies/config",children:"config"})," - NPM package for using config management with your NodeJS service"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/MapColonies/config-ui",children:"config-ui"})," - UI for interacting with the config server"]}),"\n"]}),"\n","\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"config parts relation diagram",src:t(7926).A+"",width:"501",height:"512"})}),"\n",(0,i.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,i.jsx)(n.p,{children:"The MapColonies\u2122 Config Management system provides a centralized solution for managing all service configurations.\nThis system ensures a single source of truth, simplifying configuration management.\nIt also validates configurations against a JSON Schema, guaranteeing their correctness.\nAdditionally, schema validation ensures that all configurations are strongly typed, enabling seamless integration with your code."}),"\n",(0,i.jsx)(n.h2,{id:"before-we-start",children:"Before we start"}),"\n",(0,i.jsx)(n.p,{children:"In general, the implementation of the MapColonies\u2122 Config Management system consists of the following steps:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Work environment setup."}),"\n",(0,i.jsx)(n.li,{children:"Define a JSON Schema for your service configuration."}),"\n",(0,i.jsx)(n.li,{children:"Validating that the schema and the generated types are correct."}),"\n",(0,i.jsx)(n.li,{children:"Integrating the schema with your service.\nBelow each step is explained in detail."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"initialize-the-work-environment",children:"Initialize the work environment"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Clone the schemas repo into your own machine:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone git@github.com:MapColonies/schemas.git\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Change the working directory."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd schemas\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Install the dependencies."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:"Create a new branch for your schema."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git branch <my-branch-name>\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsx)(n.li,{children:"Open the repository in your editor (vscode for this guide)."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"code .\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"6",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Create a file for your schema under the schemas folder."}),"\n",(0,i.jsxs)(n.p,{children:["The directory hierarchy represents the ID of the schema. For example, a common schema that handles redis configuration might be under ",(0,i.jsx)(n.code,{children:"schemas/common/redis/v1.schema.json"})," and its id will be ",(0,i.jsx)(n.code,{children:"https://mapcolonies.com/common/redis/v1"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The file name is based on the order of the schema. If it's the first one, the name should be ",(0,i.jsx)(n.code,{children:"v1.schema.json"}),", otherwise it should be the next number in order."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"creating-the-schema",children:"Creating the schema"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Start by filling all the metadata for your JSON Schema. The more metadata you fill, it will be easier to understand and use your schema."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="schemas/my-domain/my-schema/v1.schema.json"',children:'{\n  "$id": "https://mapcolonies.com/my-domain/my-schema/v1",\n  "type": "object",\n  "title": "myDomainMySchemaV1",\n  "description": "My domain\'s schema"\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["Create your schema content. Use the official JSON Schema docs, ",(0,i.jsx)(n.a,{href:"/docs/knowledge-base/json-schema/json-schema-tips",children:"The tips page"})," and check other schemas in the repo for reference."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="schemas/my-domain/my-schema/v1.schema.json"',children:'{\n  "$id": "https://mapcolonies.com/my-domain/my-schema/v1",\n  "type": "object",\n  "title": "myDomainMySchemaV1",\n  "description": "My domain\'s schema",\n  "properties": {\n    "id": {\n      "type": "string",\n      "description": "The unique identifier for the entity"\n    },\n    "name": {\n      "type": "string",\n      "description": "The name of the entity"\n    },\n    "age": {\n      "type": "integer",\n      "description": "The age of the entity",\n      "x-env-value": "ENTITY_AGE"\n    },\n    "isAlive": {\n      "type": "boolean",\n      "description": "Is the entity alive",\n      "x-env-value": "ENTITY_IS_ALIVE"\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["You can use ",(0,i.jsx)(n.code,{children:"x-env-value"})," to enable overriding the value of a field using environment variable.\nFor more information check out the relevant docs in ",(0,i.jsx)(n.a,{href:"https://github.com/MapColonies/config?tab=readme-ov-file#environment-variables",children:"config"})," and ",(0,i.jsx)(n.a,{href:"https://github.com/MapColonies/schemas?tab=readme-ov-file#custom-schema-properties",children:"schemas"}),"."]})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"If we want our service schema to extend the base boilerplate schema we could do this like that:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "$id": "https://mapcolonies.com/my-domain/my-schema/v1",\n  "type": "object",\n  "title": "myDomainMySchemaV1",\n  "description": "My domain\'s schema",\n  "allOf": [\n    {\n      "$ref": "https://mapcolonies.com/common/boilerplate/v4"\n    },\n    {\n      "type": "object",\n      "properties": {\n        "myDomain": {\n          "$ref": "#/definitions/myDomainMySchemaV1"\n        }\n      }\n    }\n  ],\n  "definitions": {\n    "myDomainMySchemaV1": {\n      "type": "object",\n      "properties": {\n        "id": {\n          "type": "string",\n          "description": "The unique identifier for the entity"\n        },\n        "name": {\n          "type": "string",\n          "description": "The name of the entity"\n        },\n        "age": {\n          "type": "integer",\n          "description": "The age of the entity",\n          "x-env-value": "ENTITY_AGE"\n        },\n        "isAlive": {\n          "type": "boolean",\n          "description": "Is the entity alive",\n          "x-env-value": "ENTITY_IS_ALIVE"\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"\xa0\xa0\xa0\xa0\xa0\xa0The result is a combined object with both the boilerplate schema and our own properties."}),"\n",(0,i.jsx)(n.admonition,{type:"important",children:(0,i.jsx)(n.p,{children:"When extending the boilerplate, you should check and make sure you extend the newest version. The version in this guide might be older."})}),"\n",(0,i.jsx)(n.h2,{id:"run-validations",children:"Run validations"}),"\n",(0,i.jsx)(n.p,{children:"We want to make sure that the schema are valid, therefore we need to check the schema for errors.\nTo do so we can run the following command and make changes based on the feedback."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm run validate\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["To see all the validations check the following doc: ",(0,i.jsx)(n.a,{href:"https://github.com/MapColonies/schemas?tab=readme-ov-file#validations",children:"https://github.com/MapColonies/schemas?tab=readme-ov-file#validations"})]})}),"\n",(0,i.jsx)(n.h2,{id:"validating-the-types",children:"Validating the types"}),"\n",(0,i.jsx)(n.p,{children:"The types that the schemas package exports are automatically generated from the json schema. We want to make sure that the types are correct before we move forward. This way we can check the types and if anything is wrong go back and fix the schema."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Build the package:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm run build\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["Check that the types are as you expected. They can be found under the ",(0,i.jsx)(n.code,{children:"build"})," directory under the same hierarchy as the schema.\nFor example, those are the types generated for the schema we created above extending the boilerplate schema:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",metastring:'title="build/schemas/my-domain/my-schema/v1.schema.d.ts"',children:'import { typeSymbol } from \'../../symbol.js\';\ndeclare const exported: {\n    readonly [typeSymbol]: {\n        [x: string]: unknown;\n        myDomain?: {\n            [x: string]: unknown;\n            id?: string | undefined;\n            name?: string | undefined;\n            age?: number | undefined;\n            isAlive?: boolean | undefined;\n        } | undefined;\n        openapiConfig: {\n            [x: string]: unknown;\n            filePath: string;\n            basePath: string;\n            rawPath: string;\n            uiPath: string;\n        };\n        telemetry: {\n            [x: string]: unknown;\n            logger: {\n                [x: string]: unknown;\n                level: "info" | "trace" | "debug" | "warn" | "error" | "fatal";\n                prettyPrint: boolean;\n            };\n            shared: {\n                [x: string]: unknown;\n                serviceName?: string | undefined;\n                serviceVersion?: string | undefined;\n                hostname?: string | undefined;\n            };\n            tracing: {\n                [x: string]: unknown;\n                debug?: boolean | undefined;\n                url?: string | undefined;\n                traceRatio?: number | undefined;\n                isEnabled: boolean;\n            };\n        };\n        server: {\n            [x: string]: unknown;\n            port: number;\n            request: {\n                [x: string]: unknown;\n                payload: {\n                    [x: string]: unknown;\n                    limit: string;\n                };\n            };\n        };\n    };\n...\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"The rest of the file is important for the inner working of the schemas package. You should check only the types."})}),"\n",(0,i.jsx)(n.h2,{id:"checking-integration-with-your-service",children:"Checking integration with your service"}),"\n",(0,i.jsx)(n.p,{children:"Before merging the changes you made, we want to make sure it works with your service."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"install the development version of the schemas package into your service.\nThere are multiple ways to achieve that, with some of them described below."}),"\n"]}),"\n",(0,i.jsxs)(k,{children:[(0,i.jsxs)(I,{value:"github",label:"Github",children:[(0,i.jsx)(n.p,{children:"When opening a PR in the schemas repo, the latest version of your branch will be built and be available for a week."}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Push your changes to the remote repository."}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git push --set-upstream origin <my-branch-name>\n"})}),(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Open a PR in the schemas repo."}),"\n",(0,i.jsx)(n.li,{children:"If all the validations pass, a comment will appear with instructions and link to the package."}),"\n",(0,i.jsxs)(n.li,{children:["Insert the link into your service's ",(0,i.jsx)(n.code,{children:"package.json"})," file."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "dependencies": {\n    "@map-colonies/schemas": <insert-generated-link>\n  }\n}\n'})}),(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsx)(n.li,{children:"Install the package."}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install\n"})})]}),(0,i.jsxs)(I,{value:"local",label:"Local Path",children:[(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Build the schemas package."}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm run build\n"})}),(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["Edit your service's ",(0,i.jsx)(n.code,{children:"package.json"})," file with the local path to the schemas repo."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "dependencies": {\n    "@map-colonies/schemas": "file:../schemas"\n  }\n}\n'})}),(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Install the package."}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install\n"})}),(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:"Now any time you rebuild the schemas package, it will be available in your service."}),"\n"]}),(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"if you get ESLint or TSC errors, you should just reload it in your editor."})})]}),(0,i.jsxs)(I,{value:"pack",label:"NPM Pack",children:[(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Build the schemas package."}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm run build\n"})}),(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Pack the package."}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm pack\n"})}),(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:["Edit your service's ",(0,i.jsx)(n.code,{children:"package.json"})," file with the path to the packed package."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "dependencies": {\n    "@map-colonies/schemas": "<path-to-packed-package>"\n  }\n}\n'})}),(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:"Install the package."}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install\n"})})]}),(0,i.jsxs)(I,{value:"other",label:"Other Options",children:[(0,i.jsx)(n.p,{children:"Other options are available, but they won't be covered in this guide. If you you want to check them out, you can read the following docs:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.npmjs.com/cli/v10/commands/npm-link",children:"npm link"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://verdaccio.org/",children:"verdaccio"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.npmjs.com/cli/v10/commands/npm-install",children:"npm install from git"})}),"\n"]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Change the config in your service to use the new schema."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",metastring:'title="src/common/config.ts"',children:"\nimport { type ConfigInstance, config } from '@map-colonies/config';\nimport { <your-new-schema>, type [your-new-schema-type] } from '@map-colonies/schemas';\n\n// Choose here the type of the config instance and import this type from the entire application\ntype ConfigType = ConfigInstance<[your-new-schema-type]>;\n\nlet configInstance: ConfigType | undefined;\n\n/**\n * Initializes the configuration by fetching it from the server.\n * This should only be called from the instrumentation file.\n * @returns A Promise that resolves when the configuration is successfully initialized.\n */\nasync function initConfig(offlineMode?:boolean): Promise<void> {\n  configInstance = await config({\n    configName: 'boiler-config',\n    configServerUrl: 'http://localhost:8080',\n    schema: <your-new-schema>,\n    version: 'latest',\n    offlineMode: offlineMode\n  });\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Check that the service works as expected."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,i.jsx)(n.p,{children:"Now that you finished writing your schema, you can submit a PR to the schemas repo and ask for it to be reviewed."}),"\n",(0,i.jsx)(n.p,{children:"We hope this guide was helpful and you were able to integrate the MapColonies\u2122 Config Management system into your service."}),"\n",(0,i.jsx)(n.p,{children:"If you have any questions or need help, feel free to ask for help."}),"\n",(0,i.jsx)(n.p,{children:"If you have any suggestions for this guide, please open a pull request."})]})}function E(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(_,{...e})}):_(e)}},7926:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/config-relation-diagram-87fe1f6fc468d63f297f5a7cec028ca9.png"},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(6540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);